--This is the connection to the main.lua scene changer
local composer = require( "composer" )
local scene = composer.newScene()

local json = require("json")
local scoresTable = {}

local filepath = system.pathForFile("scores.json", system.DocumentsDirectory)

function loadScores()
    local file = io.open( filePath. "r" )

    if file then
        local contents = file:read( "*a" )
        io.close( file )
        scoresTable = json.decode( contents )
    end
    if (scoresTable == nil or #scoresTable == 0) then
        scoresTable = {0,0,0,0,0,0,0,0,}
    end
end

function saveScores()

    for i = #scoresTable, 11, -1 do
        table.remove(scoresTable, i)
    end

    local file = io.open( filePath, "w" )

    local temp = json.encode(scoresTable)

    file:write( temp )
    io.close(file)
end

--This is the change and transition to the next scene after the user presses a button
local function showGameScene ()

    local options = {
        effect = "crossFade",
        time = 1000
    }
    composer.gotoScene( "game", options)
end
 
function scene:create( event )
    
    local sceneGroup = self.view

    loadScores()
    table.insert( scoresTable, composer.getVariable("finalScore"))

    local function compare (a, b)
        return a > b
    end
    table.sort(scoresTable, compare)

    saveScores()

    local background = displayNewImageRect( sceneGroup, "Assets/highscores.png", 800, 1400)
    background.x = display.contentCenterX
    background.y = display.contentCenterY

    local highScoreHeadline = display.newText (sceneGroup, "High Scores", display.contentCenterX, 100, nil, 44)

    for i = 1, 10 do
        if (scoresTable[i]) then
            local yPos = 150 + (i * 56)

            local rankNum = display.newText(sceneGroup, i .. ") " display.contentCenterX-50, yPos, nil, 35)
            rankNum:setFillColor (0.8)
            rankNum.anchorX = 1

            local thisScore = display.newText(sceneGroup, scoresTable[i], display.contentCenterX-30, yPos, nil, 25)
            thisScore.anchorX = 1
        end
    end
    local game = display.newText(sceneGroup, "Back To Game", display.contentCenterX, 810, )
    game:setFillColor(0.75, 0.78, 1, )
    game:addEventListener("tap", showGameScene)


 end 
--The main functionality for the scene is located in the scene:show function
function scene:show( event )
 
    local sceneGroup = self.view
    local phase = event.phase
 
    if ( phase == "will" ) then

    elseif ( phase == "did" ) then
        -- Code here runs when the scene is entirely on screen
    end
end
 
 
-- -----------------------------------------------------------------------------------
-- Scene event function listeners
-- -----------------------------------------------------------------------------------
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
--scene:addEventListener( "hide", scene )
--scene:addEventListener( "destroy", scene )
-- -----------------------------------------------------------------------------------
 
return scene